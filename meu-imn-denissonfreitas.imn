node n1 {
    type router
    model PC
    network-config {
	hostname Alice
	!
	interface eth0
	 ipv6 address 2001:db8:1::20/64
	 ip address 10.0.2.20/24
	!
    }
    canvas c1
    iconcoords {285.0 75.0}
    labelcoords {244.0 78.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('Alice_Cliente.py', )
	cmdup=('python Alice_Cliente.py', )
	meta=Alice_Cliente
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Alice_Cliente.py
	custom-command Alice_Cliente.py
	config {
	# Importacao da biblioteca de socket
	from socket import *
	
	nomeServidor = '200.17.121.13'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor " + nomeServidor + " : ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n2 {
    type router
    model PC
    network-config {
	hostname Bob
	!
	interface eth0
	 ipv6 address 2001:db8:1::21/64
	 ip address 10.0.2.21/24
	!
    }
    canvas c1
    iconcoords {449.0 65.0}
    labelcoords {408.0 72.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('B_Cliente.py', )
	cmdup=('python B_Cliente.py', )
	meta=BCliente
	}
    }
    custom-config {
	custom-config-id service:UserDefined:B_Cliente.py
	custom-command B_Cliente.py
	config {
	# Importacao da biblioteca de socket
	from socket import *
	
	nomeServidor = '200.17.121.13'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor " + nomeServidor + " : ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n3 {
    type lanswitch
    network-config {
	hostname MinhaEmpresa
	!
    }
    canvas c1
    iconcoords {403.0 172.0}
    labelcoords {403.0 196.0}
    interface-peer {e0 n4}
    interface-peer {e1 n1}
    interface-peer {e2 n2}
    interface-peer {e3 n6}
    interface-peer {e4 n7}
}

node n4 {
    type router
    model router
    network-config {
	hostname ProvedorInternet
	!
	interface eth1
	 ipv6 address 2001:db8:1::1/64
	 ip address 10.0.2.1/24
	!
	interface eth0
	 ipv6 address 2001:db8:0::1/64
	 ip address 200.17.121.1/24
	!
    }
    canvas c1
    iconcoords {377.0 310.0}
    labelcoords {377.0 342.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n3}
}

node n5 {
    type router
    model host
    network-config {
	hostname MeuSite
	!
	interface eth0
	 ipv6 address 2001:db8:0::10/64
	 ip address 200.17.121.13/24
	!
    }
    canvas c1
    iconcoords {68.0 364.0}
    labelcoords {58.0 408.0}
    interface-peer {eth0 n4}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('O_Servidor.py', )
	cmdup=('python O_Servidor.py', )
	meta=Servidor
	}
    }
    custom-config {
	custom-config-id service:UserDefined:O_Servidor.py
	custom-command O_Servidor.py
	config {
	from socket import *
	
	portaServidor = 12000
	
	socketServidor = socket (AF_INET, SOCK_STREAM)
	
	socketServidor.bind (('200.17.121.13', portaServidor))
	
	socketServidor.listen (1)
	
	# Python 2
	# print "O servidor esta pronto para receber"
	
	# Python 3
	print ("O servidor esta pronto para receber")
	
	while 1 :
	
	    socketConexao, endereco = socketServidor.accept ()
	
	    frase = socketConexao.recv (1024)
	
	    fraseMaiscula = frase.upper ()
	
	    socketConexao.send (fraseMaiscula)
	
	    socketConexao.close ()
	
	}
    }
    services {DefaultRoute SSH UserDefined}
}

node n6 {
    type router
    model PC
    network-config {
	hostname Zack
	!
	interface eth0
	 ip address 10.0.2.22/24
	 ipv6 address 2001:db8:1::22/64
	!
    }
    canvas c1
    iconcoords {572.0 80.0}
    labelcoords {540.0 81.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('Z_Cliente.py', )
	cmdup=('python Z_Cliente.py', )
	meta=ZackCliente
	}
    }
    custom-config {
	custom-config-id service:UserDefined:Z_Cliente.py
	custom-command Z_Cliente.py
	config {
	# Importacao da biblioteca de socket
	from socket import *
	
	nomeServidor = '10.0.2.10'
	
	portaServidor = 12000
	
	socketCliente = socket (AF_INET, SOCK_STREAM)
	
	socketCliente.connect ((nomeServidor, portaServidor))
	
	# Python 2
	# frase = raw_input ('Informe uma frase em letras minusculas: ')
	
	# Python 3
	frase = input ('Informe uma frase em letras minusculas: ')
	
	socketCliente.send (frase.encode())
	
	fraseModificada = socketCliente.recv (1024)
	
	# Python 2
	# print "Do Servidor: ", fraseModificada
	
	# Python 3
	print ("Do Servidor " + nomeServidor + " : ", fraseModificada.decode())
	
	socketCliente.close ()
	
	}
    }
    services {DefaultRoute UserDefined}
}

node n7 {
    type router
    model host
    network-config {
	hostname Backup
	!
	interface eth0
	 ip address 10.0.2.10/24
	 ipv6 address 2001:db8:1::10/64
	!
    }
    canvas c1
    iconcoords {559.0 176.0}
    labelcoords {559.0 208.0}
    interface-peer {eth0 n3}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('B_Servidor.py', )
	cmdup=('python B_Servidor.py', )
	meta=ServidorBackup
	}
    }
    custom-config {
	custom-config-id service:UserDefined:B_Servidor.py
	custom-command B_Servidor.py
	config {
	from socket import *
	
	portaServidor = 12000
	
	socketServidor = socket (AF_INET, SOCK_STREAM)
	
	socketServidor.bind (('10.0.2.10', portaServidor))
	
	socketServidor.listen (1)
	
	# Python 2
	# print "O servidor esta pronto para receber"
	
	# Python 3
	print ("O servidor esta pronto para receber")
	
	while 1 :
	
	    socketConexao, endereco = socketServidor.accept ()
	
	    frase = socketConexao.recv (1024)
	
	    fraseMaiscula = frase.upper ()
	
	    socketConexao.send (fraseMaiscula)
	
	    socketConexao.close ()
	
	}
    }
    services {DefaultRoute SSH UserDefined}
}

link l1 {
    nodes {n5 n4}
    bandwidth 0
}

link l2 {
    nodes {n4 n3}
    bandwidth 0
}

link l3 {
    nodes {n3 n1}
    bandwidth 0
}

link l4 {
    nodes {n3 n2}
    bandwidth 0
}

link l5 {
    nodes {n6 n3}
    bandwidth 0
}

link l6 {
    nodes {n3 n7}
    bandwidth 0
}

annotation a1 {
    iconcoords {226 15 609 223}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ebc0bb
    width 0
    border #000000
    rad 25
    canvas c1
}

annotation a2 {
    iconcoords {13 245 152 458}
    type rectangle
    label {}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

annotation a3 {
    iconcoords {665.0 72.0}
    type text
    label {Computadores da empresa}
    labelcolor #000000
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a4 {
    iconcoords {674.0 100.0}
    type text
    label {Alice, Bob e Zack}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a5 {
    type text
    iconcoords {824.0 84.0}
    label {}
    canvas c1
}

annotation a6 {
    iconcoords {508.0 241.0}
    type text
    label {Servidor interno de backup da empresa em LAN}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a7 {
    type text
    iconcoords {771.0 157.0}
    label {}
    canvas c1
}

annotation a8 {
    iconcoords {329.0 368.0}
    type text
    label {Provedor e internet}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a9 {
    type text
    iconcoords {410.0 379.0}
    label {}
    canvas c1
}

annotation a10 {
    iconcoords {26.0 485.0}
    type text
    label {Servidor do Site na nuvem da Hostinger.  Site em wordpress}
    labelcolor black
    fontfamily {Arial}
    fontsize 12
    canvas c1
}

annotation a11 {
    type text
    iconcoords {218.0 210.0}
    label {}
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names no
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
}

